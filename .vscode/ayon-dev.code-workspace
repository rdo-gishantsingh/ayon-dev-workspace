// =================================================================================
// AYON UNIFIED DEVELOPMENT WORKSPACE
// =================================================================================
// This file defines the definitive multi-root workspace for AYON platform development.
// Place this file in your root development directory (e.g., ayon-dev/) and
// open it with VS Code to launch the entire environment.
//
// =================================================================================
{
  // -----------------------------------------------------------------------------
  // FOLDER STRUCTURE
  // Defines all the AYON repositories that are part of this workspace.
  // The 'name' property provides a clear, descriptive label in the File Explorer.
  // The 'path' is relative to this .code-workspace file.
  // -----------------------------------------------------------------------------
  "folders": [
    {
      "name": "kitsu-server",
      "path": "../../kitsu-docker"
    },
    {
      "name": "ayon-server",
      "path": "../../ayon-docker"
    },
    {
      "name": "ayon-core",
      "path": "../../ynput-ayon-core"
    },
    {
      "name": "ayon-launcher",
      "path": "../../ayon-launcher"
    },
    {
      "name": "ayon-maya",
      "path": "../../ynput-ayon-maya" // Example addon
    }
    // Add other addons as you work on them, for example:
    // {
    //   "name": "ayon-blender",
    //   "path": "../../ynput-ayon-blender"
    // }
  ],

  // -----------------------------------------------------------------------------
  // WORKSPACE SETTINGS
  // These settings apply globally to all folders in the workspace.
  // They are overridden by per-folder settings if a .vscode/settings.json exists.
  // -----------------------------------------------------------------------------
  "settings": {
    // General Editor & UI
    "workbench.colorTheme": "Default Dark Modern",
    "workbench.iconTheme": "vscode-icons",
    "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font",
    "editor.fontFamily": "FiraCode Nerd Font Mono, 'Courier New', monospace",
    "editor.fontLigatures": true,
    "editor.minimap.enabled": false,
    "editor.rulers": [88, 120],
    "files.autoSave": "onFocusChange",
    "files.trimTrailingWhitespace": true,

    // File Explorer & Nesting (for a cleaner view)
    "explorer.compactFolders": false,
    "explorer.fileNesting.enabled": true,
    "explorer.fileNesting.patterns": {
      "*.py": "${capture}.pyc, ${capture}.pyi",
      "*.ts": "${capture}.js, ${capture}.d.ts, ${capture}.js.map",
      "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, .npmrc, .nvmrc, tsconfig.json",
      "pyproject.toml": "poetry.lock, requirements.txt, .venv, venv",
      "readme.md": "README.md, readme, LICENSE, license.md, CONTRIBUTING.md"
    },

    // File Exclusions (Critical for performance in large workspaces)
    "files.exclude": {
      "**/.git": true,
      "**/.DS_Store": true,
      "**/__pycache__": true,
      "**/*.pyc": true,
      "**/.venv": true, // Hide venv folders, but the Python extension will still find them
      "**/venv": true
    },
    "search.exclude": {
      "**/node_modules": true,
      "**/bower_components": true,
      "**/*.code-search": true,
      "**/build": true,
      "**/dist": true
    },

    // --- Language-Specific Settings ---

    // Python Configuration (for backend, core, launcher, addons)

    "editor.formatOnSave": true,
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.codeActionsOnSave": {
      "source.organizeImports": "explicit",
      "source.fixAll.ruff": "explicit"
    },
    "ruff.configurationPreference": "editorFirst",
    "ruff.lineLength": 120,
    "python.testing.pytestEnabled": true,
    "python.testing.autoTestDiscoverOnSaveEnabled": true,

    "python.analysis.typeCheckingMode": "basic",
    // NOTE: The Python extension will automatically detect and use the .venv
    // folder inside each Python project (e.g., ayon-core/.venv).
    "python.terminal.activateEnvironment": true,

    "python.analysis.diagnosticSeverityOverrides": {
      "reportAttributeAccessIssue": "none",
      "reportOptionalSubscript": "none"
    },

    // This is the key to enabling cross-folder intellisense for Python.
    // It tells the Pylance language server to include all our Python projects
    // in its analysis path, resolving imports across folders.
    "python.analysis.extraPaths": [
      "./.venv/lib/python3.9/site-packages",
      "${workspaceFolder:ayon-core}/server",
      "${workspaceFolder:ayon-core}/client",
      "${workspaceFolder:ayon-core}/client/vendor/python",
      "${workspaceFolder:ayon-core}/server_addon/maya/client/addons",
      "${workspaceFolder:ayon-maya}/server",
      "${workspaceFolder:ayon-maya}/client",
      "/home/gisi/Dev/stubs/maya-completion"
      // As you add more addon folders, add their paths here too.
      // For example: "${workspaceFolder: Blender (Python)}"
    ],
    "python.autoComplete.extraPaths": [
      "./.venv/lib/python3.9/site-packages",
      "${workspaceFolder:ayon-core}/server",
      "${workspaceFolder:ayon-core}/client",
      "${workspaceFolder:ayon-core}/client/vendor/python",
      "${workspaceFolder:ayon-core}/server_addon/maya/client/addons",
      "${workspaceFolder:ayon-maya}/server",
      "${workspaceFolder:ayon-maya}/client",
      "/home/gisi/Dev/stubs/maya-completion"
    ],

    // TypeScript/JavaScript Configuration (for ayon-frontend)
    "[typescript]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.formatOnSave": true
    },
    "[typescriptreact]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.formatOnSave": true
    },
    "[javascript]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.formatOnSave": true
    },
    "[json]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode",
      "editor.formatOnSave": true
    },
    "[jsonc]": {
      "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "editor.fontSize": 14
  },

  // -----------------------------------------------------------------------------
  // UNIFIED TASKS
  // Defines common commands that can be run from the "Terminal > Run Task..." menu.
  // The `cwd` option targets the command to the correct project folder.
  // -----------------------------------------------------------------------------
  "tasks": {
    "version": "2.0.0",
    "tasks": [
      {
        "label": "Start Ayon Server",
        "type": "shell",
        "command": "docker",
        "args": ["compose", "up", "--build", "--detach"],
        "group": {
          "kind": "build",
          "isDefault": true
        },
        "problemMatcher": [],
        "detail": "Starts the Ayon server using Docker Compose",
        "options": {
          "cwd": "${workspaceFolder:ayon-server}",
          "shell": {
            "executable": "/bin/bash",
            "args": ["-c"]
          }
        }
      },
      {
        "label": "Stop Ayon Server",
        "type": "shell",
        "command": "docker",
        "args": ["compose", "down"],
        "group": {
          "kind": "build",
          "isDefault": true
        },
        "problemMatcher": [],
        "detail": "Stops the Ayon server and removes containers",
        "options": {
          "cwd": "${workspaceFolder:ayon-server}",
          "shell": {
            "executable": "/bin/bash",
            "args": ["-c"]
          }
        }
      },
      {
        "label": "Start Kitsu Server",
        "type": "shell",
        "command": "docker",
        "args": ["compose", "up", "--build", "--detach"],
        "group": {
          "kind": "build",
          "isDefault": true
        },
        "problemMatcher": [],
        "detail": "Starts the Kitsu server using Docker Compose",
        "options": {
          "cwd": "${workspaceFolder:kitsu-server}",
          "shell": {
            "executable": "/bin/bash",
            "args": ["-c"]
          }
        }
      },
      {
        "label": "Stop Kitsu Server",
        "type": "shell",
        "command": "docker",
        "args": ["compose", "down"],
        "group": {
          "kind": "build",
          "isDefault": true
        },
        "problemMatcher": [],
        "detail": "Stops the Kitsu server and removes containers",
        "options": {
          "cwd": "${workspaceFolder:kitsu-server}",
          "shell": {
            "executable": "/bin/bash",
            "args": ["-c"]
          }
        }
      },
      {
        "label": "Run Ayon Core Tests",
        "type": "shell",
        "command": "./scripts/run_tests.sh",
        "group": {
          "kind": "test",
          "isDefault": true
        },
        "problemMatcher": [],
        "detail": "Runs tests for the Ayon core library",
        "options": {
          "cwd": "${workspaceFolder:ayon-core}",
          "shell": {
            "executable": "/bin/bash",
            "args": ["-c"]
          }
        }
      },
      {
        "label": "Run Ayon Maya Tests: Unit",
        "detail": "Runs unit tests for the Ayon Maya addon",
        "command": "poetry",
        "args": [
          "run",
          "python",
          "./client/ayon_maya/tests/scripts/run_unit_tests.py"
        ],
        "options": {
          "cwd": "${workspaceFolder:ayon-maya}"
        },
        "group": {
          "kind": "test",
          "isDefault": true
        }
      },
      {
        "label": "Run Ayon Maya Tests: Integration",
        "detail": "Runs integration tests for the Ayon Maya addon",
        "command": "poetry",
        "args": [
          "run",
          "python",
          "./client/ayon_maya/tests/scripts/run_integration_tests.py"
        ],
        "options": {
          "cwd": "${workspaceFolder:ayon-maya}"
        },
        "group": {
          "kind": "test",
          "isDefault": true
        }
      },
      {
        "label": "Run Ayon Maya Tests: All",
        "detail": "Runs all tests for the Ayon Maya addon",
        "command": "echo",
        "dependsOn": [
          "Run Ayon Maya Tests: Unit",
          "Run Ayon Maya Tests: Integration"
        ],
        "dependsOrder": "sequence",
        "args": [
          "All tests for the Ayon Maya addon have been run successfully."
        ],
        "options": {
          "cwd": "${workspaceFolder:ayon-maya}"
        },
        "group": {
          "kind": "test",
          "isDefault": true
        }
      },
      {
        "label": "Generate PR Test Summary",
        "detail": "Processes test logs and creates a copyable summary for PRs",
        "type": "shell",
        "command": "poetry run python ./client/ayon_maya/tests/scripts/generate_pr_summary.py",
        "options": {
          "cwd": "${workspaceFolder:ayon-maya}"
        },
        "group": {
          "kind": "test",
          "isDefault": true
        },
        "problemMatcher": [],
        "presentation": {
          "reveal": "always",
          "panel": "shared",
          "showReuseMessage": false,
          "clear": true
        }
      }
    ]
  },

  // -----------------------------------------------------------------------------
  // UNIFIED LAUNCH CONFIGURATIONS
  // Defines debug configurations available in the "Run and Debug" panel.
  // Allows you to debug different parts of the AYON stack from one place.
  // -----------------------------------------------------------------------------
  "launch": {
    "version": "0.2.0",
    "configurations": []
  },

  // -----------------------------------------------------------------------------
  // RECOMMENDED EXTENSIONS
  // VS Code will prompt you to install these if you don't have them,
  // ensuring a consistent environment for the whole team.
  // -----------------------------------------------------------------------------
  "extensions": {
    "recommendations": [
      // VS Code Essentials
      "vscode-icons-team.vscode-icons", // Icon theme for better visual organization

      // Foundational
      "ms-python.python",
      "ms-python.pylance",
      "ms-vscode.cpptools", // If you work with any C++ parts

      // Containers & DevOps
      "ms-azuretools.vscode-docker", // For Docker support
      "ms-azuretools.vscode-containers", // For remote development in containers

      // Code Quality & Style
      "charliermarsh.ruff", // For Python linting and formatting
      "esbenp.prettier-vscode", // For consistent code formatting
      "dbaeumer.vscode-eslint", // For JavaScript/TypeScript linting
      "usernamehw.errorlens", // Highlights errors in the editor

      // Workflow & Productivity
      "eamodio.gitlens", // A MUST for poly-repo projects
      "christian-kohler.path-intellisense",
      "github.copilot",
      "folke.monorepo-workspace", // Helps focus on specific projects in the explorer
      "alefragnani.project-manager" // For managing multiple projects easily
    ]
  }
}
